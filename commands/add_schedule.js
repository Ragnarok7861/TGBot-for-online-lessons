
const { addSchedule } = require('../db/queries');
const stepData = {}; // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

async function handleAddScheduleCommand(ctx) {
  const adminId = process.env.ADMIN_ID; // ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  const userId = ctx.message.from.id;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
  if (String(userId) !== String(adminId)) {
    return ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–æ–≤. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
  stepData[userId] = { step: 1 };
  ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∏–º—è —É—á–µ–Ω–∏–∫–∞:');
}

async function handleMessage(ctx) {
  const userId = ctx.message.from.id;


  if (!stepData[userId]) return;

  const userStep = stepData[userId];
  const input = ctx.message.text.trim();

  switch (userStep.step) {
    case 1: // –í–≤–æ–¥ –∏–º–µ–Ω–∏ —É—á–µ–Ω–∏–∫–∞
      userStep.name = input;
      userStep.step++;
      ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é —É—á–µ–Ω–∏–∫–∞:');
      break;

    case 2: // –í–≤–æ–¥ —Ñ–∞–º–∏–ª–∏–∏ —É—á–µ–Ω–∏–∫–∞
      userStep.surname = input;
      userStep.step++;
      ctx.reply('–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –í—Ç–æ—Ä–Ω–∏–∫, –°—Ä–µ–¥–∞):');
      break;

    case 3: // –í–≤–æ–¥ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
      const validDays = [
        '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
        '–í—Ç–æ—Ä–Ω–∏–∫',
        '–°—Ä–µ–¥–∞',
        '–ß–µ—Ç–≤–µ—Ä–≥',
        '–ü—è—Ç–Ω–∏—Ü–∞',
        '–°—É–±–±–æ—Ç–∞',
        '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ',
      ];
      if (!validDays.includes(input)) {
        return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –í—Ç–æ—Ä–Ω–∏–∫, –°—Ä–µ–¥–∞):');
      }
      userStep.dayOfWeek = input;
      userStep.step++;
      ctx.reply('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —É—Ä–æ–∫–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ DD-MM-YYYY):');
      break;

    case 4: // –í–≤–æ–¥ –ø–æ–ª–Ω–æ–π –¥–∞—Ç—ã
      const dateRegex = /^\d{2}-\d{2}-\d{4}$/;
      if (!dateRegex.test(input)) {
        return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É (–≤ —Ñ–æ—Ä–º–∞—Ç–µ DD-MM-YYYY):');
      }

      // –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞—Ç—É –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const [day, month, year] = input.split('-');
      userStep.date = `${year}-${month}-${day}`; // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD
      userStep.step++;
      ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —É—Ä–æ–∫–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM):');
      break;

    case 5: // –í–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏
      if (!/^\d{2}:\d{2}$/.test(input)) {
        return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM):');
      }
      userStep.time = input;
      userStep.step++;
      ctx.reply('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:');
      break;

    case 6: // –í–≤–æ–¥ –ø—Ä–µ–¥–º–µ—Ç–∞
      userStep.subject = input;

      try {
        console.log('–î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É:', {
          name: userStep.name,
          surname: userStep.surname,
          date: userStep.date,
          time: userStep.time,
          subject: userStep.subject,
          dayOfWeek: userStep.dayOfWeek,
        });

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞ –≤ –±–∞–∑—É
        await addSchedule(
          userStep.name,
          userStep.surname,
          userStep.date,
          userStep.time,
          userStep.subject,
          userStep.dayOfWeek
        );

        // –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞—Ç—É –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const [year, month, day] = userStep.date.split('-');

        ctx.reply(
          `–£—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω: üìÖ ${day}-${month}-${year} ‚è∞ ${userStep.time} ‚Äî ${userStep.subject}`
        );
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—Ä–æ–∫–∞:', err);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—Ä–æ–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      }

      // –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      delete stepData[userId];
      break;

    default:
      ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      delete stepData[userId];
      break;
  }
}

module.exports = {
  handleAddScheduleCommand,
  handleMessage,
};

